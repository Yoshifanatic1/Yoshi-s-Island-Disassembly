- This game was the most obnoxious to disassemble of any of the games I've looked at so far. It wasn't even because of the SuperFX usage (which necessitated me writing a disassembly script just for this one game and taking the time to understand SuperFX code), but simply because of the sheer amount of SNES ASM code and how often data was intertwined with the code.

- This game's code is spread out across 20 ROM banks, 4 of those being SuperFX code, making this the game with the largest amount of code I've looked at.

- Due to me being unfamiliar with SuperFX code and the level of difficulty involved with making this disassembly, I looked at Raidenthequick's disassembly (https://github.com/Raidenthequick/yoshisisland-disassembly) to help figure some things out.
Despite this, my disassembly is more accurate in some ways, makes text editable, lays out the banks correctly (ie. it's technically not $00-$3F), and also has pointers that auto-adjust (though I didn't find every pointer yet).

- Yoshi's Island makes use of the SuperFX memory map and takes advantage of the fact that banks $40-$5F are HiROM mirrored banks. The real ROM layout for this game is that banks $00-$17 are LoROM and banks $18-$3F are mirrored in the HiROM area at banks $4C-$5F.

- Asar doesn't allow the use of labels between different architectures, so I had to create a system to link the SuperFX code/Data with the SNES code. This is done by creating various pointer tables during SuperFX code/data assembly that can be read from the SNES code/data assembly side. This will allow you to safely change the SuperFX code/data and have the pointers on the SNES side auto adjust to these changes.

- Due to an asar bug and the way I handled SuperFX code assembly, it's currently impossible to assemble all the SuperFX code at once. Unless a last minute change broke something, I did verify that all the SuperFX code assembles correctly.
